#include <stdio.h>
#include <math.h>    /* for pow(x, y) */
#include "type.h"
#define n_dim 5
#define bits_per_dim 10

double decode(IPTR pj, int index, int size);
double binToDec(int *chrom, int l);

double eval(POPULATION *p, IPTR pj) 
     /* Called from gen.c and init.c */
{

  double val;
  double square = 0.0;

  val = decode(pj, 0, p->lchrom);
  square = val * val;

  return square;
}

double decode(IPTR pj, int index, int size)
{

  return ((double) binToDec(&(pj->chrom[0]), size));
}

double binToDec(int *chrom, int l)
{
  double x[n_dim];
  int i;
  int j;
  int k = 0;
  double prod;

  prod = 0.0;
  for(i = 0; i < l; i++)
  {
    printf("bar");
    j = i % bits_per_dim;
    prod += (chrom[i] == 0 ? 0.0 : pow((double)2.0, (double) j));
    if (j == 0){
    x[k] = prod;
    printf("foo%1", prod);
    prod = 0;
    }
  }

  for (k = 0; k < n_dim; k++)
  {
    prod += x[k];
  }
  return prod;
}

void decToBin(int ad, int *barray, int size)
{
  int i, t;

  t = ad;
  for(i = 0; i < size; i++){
    barray[i] = t%2;
    t = t/2;

  }
}
